<html>
<head>

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Harita</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css"
          integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="
          crossorigin="" />

    <link href="~/css/leaflet-geoman.css" rel="stylesheet" />

    <script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"
            integrity="sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew=="
            crossorigin=""></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>

    <script src="~/js/leaflet-geoman.min.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">

    <!-- jQuery library -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

    <!-- Latest compiled JavaScript -->
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.14.0/css/all.css"
          integrity="sha384-HzLeBuhoNPvSl5KYnjx0BT+WB0QEEqLprO+NBkkk5gbc67FTaL7XIGa2w1L0Xbgc" crossorigin="anonymous">
    <script src="https://kit.fontawesome.com/fda473f18c.js" crossorigin="anonymous"></script>

    <link href="~/css/style.css" rel="stylesheet" />
    <link href="~/css/autocomplete.css" rel="stylesheet" />
    <link href="~/js/sweetalert/sweetalert.css" rel="stylesheet" />
    <script src="~/js/sweetalert/sweetalert.min.js"></script>
    <script src="~/js/sweetalert/Alert.js"></script>

</head>

<body>

    <div id="mapid"></div>


    <!-- The Modal -->
    <div class="modal fade" id="myModal" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 id="girisBaslik" class="modal-title">Mahalle Bilgileri</h4>
                </div>

                <!-- Modal body -->
                <div class="modal-body">

                    <form class='needs-validation' novalidate>
                        <div class='form-group'>
                            <label for='txtGiris'>Kapı No:</label>
                            <input type='text' class='form-control' id='txtGiris' placeholder='Kapi no giriniz.'
                                   name='txtGiris' required>
                            <div class='valid-feedback'>Tamam.</div>
                            <div class='invalid-feedback'>Kaydetmek için alanı doldurun.</div>
                        </div>
                        <div class="form-group">
                            <div class="modal-footer">
                                <button type="submit" class="btn btn-success" data-dismiss="modal" id="btnKaydet" data-layer="">Kaydet</button>
                                <button class="btn btn-danger" data-dismiss="modal" id="btnKapat" data-layer="">Kapat</button>
                            </div>
                        </div>
                    </form>
                </div>

            </div>

        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="updateModal" role="dialog">
        <div class="modal-dialog modal-dialog-centered">

            <!-- Modal content-->
            <div class="modal-content">


                <div class="modal-body">
                    <p>Güncellemeyi kaydetmek ister misiniz?</p>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-success" data-dismiss="modal" id="btnUpdateKaydet">Kaydet</button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal" id="btnUpdateKaydetme">Kaydetme</button>
                </div>
            </div>

        </div>
    </div>

        <div class="search-box">
            <input id="value" class="search-txt" type="text" name="" placeholder="Adres girin">
            <button id="search" data-fly="" class="search-btn">
                <i class="fas fa-search"></i>
            </button>

        </div>
   

    <div class="container">
        <h3>SEÇİMLERİNİZ</h3>

        <div class="check_group">
            <input type="checkbox" id="neighbor" />
            <label for="neighbor">Mahalle</label>
        </div>

        <div class="check_group">
            <input type="checkbox" id="door" />
            <label for="door">Kapı</label>
        </div>

    </div>

    <script>

        var mymap = mapInit();

        var theCollection = L.layerGroup().addTo(mymap);

        var addresses;

        var change = true;

        var layersToUpdate = [];

        // loadData();

        function addEvent(layer) {

            layer.on("pm:remove", function (e) {
                //silmekten emin misiniz diye sor?
                deleteDatabase(layer);
            });

            layer.on("pm:edit", function (e) {
                if (layersToUpdate.filter(l => l.leaflet == layer._leaflet_id).length <= 0) {
                    layersToUpdate.push({leaflet: layer._leaflet_id, id: layer.id});
                }
            });

            layer.on("click", function (e) {
                bilgiAl(e);
            });

        }

        function bilgiAl(e) {
            var geojsonform = e.target.toGeoJSON();
            if (geojsonform.geometry.type == "Point") {
                getDoor(e.target.id).done(function (door) {
                    getNeighbor(door.neighborCode).done(function (neighbor) {
                        var neighborName = neighbor.neighborName;
                        L.popup()
                            .setLatLng(e.latlng)
                            .setContent('<h4>Bilgiler</h4><p> Mahalle: ' + neighborName + '</p>' + '<p> Kapı: ' + door.doorCode + '</p>')
                            .openOn(mymap);
                    });
                });

            }
            else {
                getNeighbor(e.target.id).done(function (neighbor) {
                    L.popup()
                        .setLatLng(e.latlng)
                        .setContent('<h4>Bilgiler</h4><p> Mahalle: ' + neighbor.neighborName + '</p>')
                        .openOn(mymap);
                });
            }
        }

        function getDoor(id) {
            return ajaxGET({
                url: "/Door/GetDoor",
                data: { id: id }
            });
        }

        function getNeighbor(id) {
            return ajaxGET({
                url: "/Neighbor/GetNeighbor",
                data: { id: id }
            });
        }

        function loadData(id) {
            
            if (id == "neighbor") {
                deleteData("neighbor");
                ajaxGET({
                    url: "/Neighbor/GetAll"
                }).done(function (d) {
                    for (var i = 0; i < d.length; i++) {
                        var latlngs = L.GeoJSON.coordsToLatLngs(d[i].geometry.coordinates, true);
                        var polygon = L.polygon(latlngs);
                        polygon.id = d[i].id;
                        addEvent(polygon);
                        theCollection.addLayer(polygon);
                    }
                  });
            }
            else if (id == "door") {
                deleteData("door");
                ajaxGET({
                    url: "/Door/GetAll"
                }).done(function (d) {
                    for (var i = 0; i < d.length; i++) {
                        var latlng = L.GeoJSON.coordsToLatLng(d[i].geometry.coordinates, true);
                        var marker = L.marker(latlng);
                        marker.id = d[i].id;
                        addEvent(marker);
                        theCollection.addLayer(marker);
                    }
                });
            }
       
        }

        function deleteData(id) {
            if (id == "neighbor") {
                var layers = theCollection.getLayers();
                for (var i = 0; i < layers.length; i++) {
                    var data = layers[i].toGeoJSON();
                    if (data.geometry.type == "Polygon") {
                        theCollection.removeLayer(layers[i]);
                    }
                }
            }
            else if (id == "door") {
                var layers = theCollection.getLayers();
                for (var i = 0; i < layers.length; i++) {
                    var data = layers[i].toGeoJSON();
                    if (data.geometry.type == "Point") {
                        theCollection.removeLayer(layers[i]);

                    }
                }
            }
        }

        function deleteDatabase(layer) {

            var goeJsonForm = layer.toGeoJSON();

            if (goeJsonForm.geometry.type == "Point") {
                deleteDoor(layer.id);
            }
            else if (goeJsonForm.geometry.type == "Polygon") {
                deleteNeighbor(layer.id);
            }

        }

        function deleteDoor(id) {
            ajaxPOST({
                url: "/Door/DeleteDoor",
                data: { doorId: id }
            });
            change = true;
        }

        function deleteNeighbor(id) {
            ajaxPOST({
                url: "/Neighbor/DeleteNeighbor",
                data: { neighborId: id },
                processData: function (d) {
                    var layers = theCollection.getLayers();
                    for (var i = 0; i < layers.length; i++) {
                        if (d.includes(layers[i].id)) {
                            theCollection.removeLayer(layers[i]);
                        }
                    }
                }
            });
            change = true;
        }

        //function updateData(layer) {

        //    if (layer.geometry.type == "Point") {
        //        updateDoor(layer);
        //    }
        //    else if (layer.geometry.type == "Polygon") {
        //        updateNeighbor(layer);
        //    }
        //}

        //function updateDoor(layer) {
        //    LoadinModal("Güncelleniyor...", "Lütfen Bekleyiniz");

        //    getDoor(layer.properties.id).done(function (door) {
        //        door.geometry = layer.geometry;
        //        ajaxPOST({
        //            url: "/Door/UpdateDoor",
        //            data: { door: door },
        //            async: false,
        //            processData: function (d) {
        //                if (d.drm) {
        //                    swal({
        //                        title: "Kapı Güncelleme",
        //                        text: " Kapı koordinatlarınız başarı ile güncellendi!",
        //                        type: 'success',
        //                        showConfirmButton: true,
        //                        confirmButtonText: 'Harika',
        //                        html: true
        //                    });
        //                    change = true;
        //                }
        //                else {
        //                    Alert_Error("Kapı GÜNCELLEME Hatası", d.msg);
        //                    var leafletLayer = theCollection.getLayer(layer.properties._leaflet_id);
        //                    leafletLayer.setLatLng(L.GeoJSON.coordsToLatLng(d.data.geometry.coordinates, true));
        //                }

        //            }
        //        });
        //    });
        //}

        //function updateNeighbor(layer) {
        //    LoadinModal("Güncelleniyor...", "Lütfen Bekleyiniz");

        //    getNeighbor(layer.properties.id).done(function (neighbor) {
        //        neighbor.geometry = layer.geometry;
        //        ajaxPOST({
        //            url: "/Neighbor/UpdateNeighbor",
        //            data: { neighbor: neighbor },
        //            async: false,
        //            processData: function (d) {
        //                if (d.drm) {
        //                    swal({
        //                        title: "Mahalle Güncelleme",
        //                        text: " Mahalle koordinatlarınız başarı ile güncellendi!",
        //                        type: 'success',
        //                        showConfirmButton: true,
        //                        confirmButtonText: 'Harika',
        //                        html: true
        //                    });
        //                    change = true;
        //                }
        //                else {
        //                    Alert_Error("Mahalle GÜNCELLEME Hatası", d.msg);
        //                    var leafletLayer = theCollection.getLayer(layer.properties._leaflet_id);
        //                    leafletLayer.setLatLngs(L.GeoJSON.coordsToLatLngs(d.data.geometry.coordinates, true));
        //                }
        //            }
        //        });
        //    });
        //}

        //function search() {
        //    var input, filter, ul, li, sp, i, txtValue;
        //    input = document.getElementById("searchInput");
        //    filter = input.value.toUpperCase();
        //    ul = document.getElementById("addressList");
        //    li = ul.getElementsByTagName("li");
        //    for (i = 0; i < li.length; i++) {
        //        sp = li[i].getElementsByTagName("span")[0];
        //        txtValue = sp.textContent || sp.innerText;
        //        if (txtValue.toUpperCase().indexOf(filter) > -1) {
        //            li[i].style.display = "";
        //        } else {
        //            li[i].style.display = "none";
        //        }
        //    }
        //}

        function updateData(model,layers) {
            ajaxPOST({
                url: "/Home/UpdateHandle",
                data: { model: model },
                async: false,
                processData: function (d) {
                    if (d.drm) {
                        swal({
                            title: "Güncelleme",
                            text: " Koordinatlarınız başarı ile güncellendi!",
                            type: 'success',
                            showConfirmButton: true,
                            confirmButtonText: 'Harika',
                            html: true
                        });
                        change = true;
                    }
                    else {
                        Alert_Error("GÜNCELLEME Hatası", d.msg);
                        takeOver(layers);
                    }

                }
            });
        }

        function addDatabase(info, layer) {

            if (layer.geometry.type == "Point") {
                addDoor(info, layer);
            }
            else if (layer.geometry.type == "Polygon") {
                addNeighbor(info, layer);
            }
        }

        function addDoor(info, layer) {
            LoadinModal("Kaydediliyor...", "Lütfen Bekleyiniz");

            var door = {
                DoorCode: parseInt(info),
                Geometry: layer.geometry
            };

            ajaxPOST({
                url: "/Door/AddDoor",
                data: { door: door },
                processData: function (d) {
                    if (d.drm) {
                        swal({
                            title: "Kapı Ekleme",
                            text: "Kapı numaranız başarı ile veritabanımıza eklendi!",
                            type: 'success',
                            showConfirmButton: true,
                            confirmButtonText: 'Harika',
                            html: true
                        });
                        var maplayer = theCollection.getLayer(layer.properties._leaflet_id);
                        maplayer.id = d.data.id;
                        addEvent(maplayer);
                        change = true;
                    }
                    else {
                        Alert_Error("Kapı EKLEME Hatası", d.msg);
                        theCollection.removeLayer(layer.properties._leaflet_id);
                    }
                }
            });
           

        }

        function addNeighbor(info, layer) {

            LoadinModal("Kaydediliyor...", "Lütfen Bekleyiniz");

            var neighbor = {
                NeighborName: info,
                Geometry: layer.geometry
            };

            ajaxPOST({
                url: "/Neighbor/AddNeighbor",
                data: { neighbor: neighbor },
                processData: function (d) {
                    if (d.drm) {
                        swal({
                            title: "Mahalle Ekleme",
                            text: "Mahalle adınız başarı ile veritabanımıza eklendi!",
                            type: 'success',
                            showConfirmButton: true,
                            confirmButtonText: 'Harika',
                            html: true
                        });

                        var maplayer = theCollection.getLayer(layer.properties._leaflet_id);
                        maplayer.id = d.data.id;
                        addEvent(maplayer);
                        change = true;
                    }
                    else {
                        Alert_Error("Mahalle EKLEME Hatası", d.msg);
                        theCollection.removeLayer(layer.properties._leaflet_id);
                    }

                }
            });
        }

        function mapInit() {
            var map = L.map('mapid').setView([39.1667, 35.6667], 7); //koordinatlar ve zoom seviyesi

            L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
                attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
                maxZoom: 25,
                id: 'mapbox/streets-v11',
                tileSize: 512,
                zoomOffset: -1,
                accessToken: 'pk.eyJ1IjoiY2V0aW5mdXJrYW5vIiwiYSI6ImNrZGN1YWVibzIxZGYyeHNjZzI3OTdzdXgifQ.hXpZJxz6P03IyMHVLDV0sg'
            }).addTo(map);
            //Harita

            map.pm.addControls({
                position: 'topright',
                drawcircle: false,
                drawCircleMarker: false,
                drawPolyline: false,
                drawCircle: false,
                drawRectangle: false,
                cutPolygon: false,
                dragMode: false
            }); //toolbox

            return map;
        }

        function ajaxGET(ajaxObject) {
            return $.ajax({
                type: "GET",
                url: ajaxObject.url,
                data: ajaxObject.data
            });
        }

        function ajaxPOST(ajaxObject) {

            $.ajax({
                type: "POST",
                url: ajaxObject.url,
                data: ajaxObject.data,
                async: ajaxObject.async

            }).done(ajaxObject.processData);

        }

        function takeOver(layers) {
            for (var i = 0; i < layers.length; i++) {
                let layer = theCollection.getLayer(layers[i].leaflet);
                let geojson = layer.toGeoJSON();

                if (geojson.geometry.type == "Point") {
                    getDoor(layers[i].id).done(function (door) {
                        layer.setLatLng(L.GeoJSON.coordsToLatLng(door.geometry.coordinates, true));
                    });
                }
                else if (geojson.geometry.type == "Polygon") {
                    getNeighbor(layers[i].id).done(function (neighbor) {
                        layer.setLatLngs(L.GeoJSON.coordsToLatLngs(neighbor.geometry.coordinates, true));
                    });
                }
            }
        }

    </script>

    <script src="~/js/auıtocomplete.js"></script>
    <script src="~/js/event.js"></script>
    <script src="~/js/modal.js"></script>

</body>

</html>